#!/bin/bash
# Pentesting automation script
# Written by Garv Kamra

# Check for IP/URL
if [ -z "$1" ]; then
  echo "Usage: $0 <IP/URL>"
  exit 1
fi

TARGET=$1
OUTPUT_DIR="pentest_results_$TARGET"
OUTPUT_SUBDIR="$OUTPUT_DIR/output"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Create directories for results
mkdir -p "$OUTPUT_SUBDIR"
cd "$OUTPUT_SUBDIR"

# Starting banner
echo "======================================================================================="
echo "_______         _____        ________               _____               _____ "
echo "___    |____  ____  /_______ ___  __ \_____ _______ __  /______ __________  /_"
echo "__  /| |_  / / /_  __/_  __ \__  /_/ /_  _ \__  __ \_  __/_  _ \__  ___/_  __/"
echo "_  ___ |/ /_/ / / /_  / /_/ /_  ____/ /  __/_  / / // /_  /  __/_(__  ) / /_  "
echo "/_/  |_|\__,_/  \__/  \____/ /_/      \___/ /_/ /_/ \__/  \___/ /____/  \__/  "
echo "                                                                               "
echo "======================================================================================="
echo "=========================================================="
echo "                    AutoPen by Securegarv                  "
echo "=========================================================="

echo "Starting pentesting on $TARGET..."
echo "Results will be saved in $OUTPUT_SUBDIR"

# Nmap scan
run_nmap() {
  echo "Running Nmap scan on $TARGET..."
  nmap -sV "$TARGET" -oN "nmap_scan_$TIMESTAMP.txt"
}

# Nikto Scan
run_nikto() {
  echo "Running Nikto scan..."
  mkdir -p "$OUTPUT_SUBDIR"  # Ensure the output directory exists
  nikto -h "$TARGET" -output "$OUTPUT_SUBDIR/nikto_scan_$TIMESTAMP.txt" -T 2
  if [ $? -eq 0 ]; then
    echo "Nikto scan completed. Results saved in nikto_scan_$TIMESTAMP.txt"
  else
    echo "Nikto scan failed to write results. Check permissions or disk space."
  fi
}

# WHOIS Scan
run_whois() {
  echo "Running Whois lookup..."
  whois "$TARGET" > "whois_info_$TIMESTAMP.txt"
  if [ $? -eq 0 ]; then
    echo "Whois lookup completed. Results saved in whois_info_$TIMESTAMP.txt"
  else
    echo "Whois lookup failed."
  fi
}

# URL input for Gobuster and other URL-based tools
run_gobuster_with_url() {
  read -p "Enter the URL for gobuster (e.g., http://example.com): " URL
  echo "Running gobuster for directory enumeration on $URL..."
  gobuster dir -u "$URL" -w /usr/share/wordlists/dirb/common.txt -o "gobuster_$TIMESTAMP.txt"
  echo "$URL" > "url.txt"  # Store the URL in a file
}

# Function to get the stored URL
get_stored_url() {
  if [ -f "url.txt" ]; then
    URL=$(cat "url.txt")
    echo "$URL"
  else
    echo ""  # Return empty if file doesn't exist
  fi
}

# Metasploit scan
run_metasploit() {
  echo "Starting Metasploit Framework..."

  # Start the PostgreSQL service
  sudo service postgresql start

  # Initialize the Metasploit database
  msfdb init

  # Run Metasploit commands
  sudo msfconsole -q -x "db_nmap -sV $TARGET; vulns; services; hosts; exit" > "metasploit_$TIMESTAMP.txt"
  echo "Metasploit scan completed. Results saved in metasploit_$TIMESTAMP.txt"
}

# SQLMap scan
run_sqlmap() {
  URL=$(get_stored_url)
  if [ -n "$URL" ]; then
    echo "Running SQLMap for SQL injection testing on $URL..."
    sqlmap -u "$URL" --batch --output-dir="$OUTPUT_SUBDIR/sqlmap_results" --crawl=2 --random-agent --level=2
    echo "SQLMap scan completed. Results saved in sqlmap_results directory"
  else
    echo "No URL found in url.txt. Skipping SQLMap."
  fi
}

# Autopsy scan
run_autopsy() {
  echo "Running Autopsy..."
  mkdir -p "$OUTPUT_SUBDIR/autopsy"
  autopsy > "$OUTPUT_SUBDIR/autopsy/autopsy_$TIMESTAMP.txt" &
  echo "Autopsy started. Access the Autopsy web interface for results."
}

# Wireshark capture
run_wireshark() {
  echo "Running Wireshark capture..."
  sudo wireshark &
  echo "Wireshark started. Capture packets and analyze results in the Wireshark interface."
}

# ExifTool analysis
run_exiftool() {
  echo "Running ExifTool analysis..."
  exiftool "$TARGET" > "exiftool_$TIMESTAMP.txt"
  echo "ExifTool analysis completed. Results saved in exiftool_$TIMESTAMP.txt"
}

# Sleuth Kit analysis
run_sleuthkit() {
  echo "Running Sleuth Kit analysis..."
  fls "$TARGET" > "sleuthkit_$TIMESTAMP.txt"
  echo "Sleuth Kit analysis completed. Results saved in sleuthkit_$TIMESTAMP.txt"
}

# Volatility analysis
run_volatility() {
  echo "Running Volatility analysis..."
  volatility -f "$TARGET" > "volatility_$TIMESTAMP.txt"
  echo "Volatility analysis completed. Results saved in volatility_$TIMESTAMP.txt"
}

# hashdeep analysis
run_hashdeep() {
  echo "Running hashdeep analysis..."
  hashdeep -r "$TARGET" > "hashdeep_$TIMESTAMP.txt"
  echo "hashdeep analysis completed. Results saved in hashdeep_$TIMESTAMP.txt"
}

# osquery scan
run_osquery() {
  echo "Running osquery scan..."
  osqueryi --json "SELECT * FROM processes;" > "osquery_$TIMESTAMP.txt"
  echo "osquery scan completed. Results saved in osquery_$TIMESTAMP.txt"
}

# Guymager acquisition
run_guymager() {
  echo "Running Guymager acquisition..."
  sudo guymager &
  echo "Guymager started. Acquire media and analyze results in the Guymager interface."
}

# RegRipper analysis
run_regripper() {
  echo "Running RegRipper analysis..."
  rip.pl -r "$TARGET" > "regripper_$TIMESTAMP.txt"
  echo "RegRipper analysis completed. Results saved in regripper_$TIMESTAMP.txt"
}

# GRR Rapid Response scan
run_grr() {
  echo "Running GRR Rapid Response..."
  grr_client > "grr_$TIMESTAMP.txt"
  echo "GRR Rapid Response scan completed. Results saved in grr_$TIMESTAMP.txt"
}

# memdump analysis
run_memdump() {
  echo "Running memdump..."
  sudo memdump > "memdump_$TIMESTAMP.txt"
  echo "memdump analysis completed. Results saved in memdump_$TIMESTAMP.txt"
}

# Run the IP-based scans
run_nmap
run_nikto
run_whois

# User Input for URL-based scans
run_gobuster_with_url

# Run URL-based scan with the stored URL
run_sqlmap
run_metasploit

# Run additional tools
run_autopsy
run_wireshark
run_exiftool
run_sleuthkit
run_volatility
run_hashdeep
run_osquery
run_guymager
run_regripper
run_grr
run_memdump

# Completion Message
echo "Pentesting Done... Results saved in the $OUTPUT_DIR directory."
